package com.woosiyuan.faceattendance.basis.db.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.woosiyuan.faceattendance.basis.entity.User;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER".
*/
public class UserDao extends AbstractDao<User, Long> {

    public static final String TABLENAME = "USER";

    /**
     * Properties of entity User.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "USER_NAME");
        public final static Property ImgUrl = new Property(1, String.class, "imgUrl", false, "IMG_URL");
        public final static Property PassWork = new Property(2, String.class, "passWork", false, "PASS_WORK");
        public final static Property Addr = new Property(3, String.class, "addr", false, "ADDR");
        public final static Property Tags = new Property(4, String.class, "tags", false, "USER_TAGS");
        public final static Property Id = new Property(5, Long.class, "id", true, "_id");
        public final static Property ClockTime = new Property(6, String.class, "clockTime", false, "CLOCK_TIME");
        public final static Property Introduce = new Property(7, String.class, "introduce", false, "INTRODUCE");
        public final static Property Tel = new Property(8, String.class, "tel", false, "TEL");
    }


    public UserDao(DaoConfig config) {
        super(config);
    }
    
    public UserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER\" (" + //
                "\"USER_NAME\" TEXT," + // 0: name
                "\"IMG_URL\" TEXT," + // 1: imgUrl
                "\"PASS_WORK\" TEXT," + // 2: passWork
                "\"ADDR\" TEXT," + // 3: addr
                "\"USER_TAGS\" TEXT," + // 4: tags
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 5: id
                "\"CLOCK_TIME\" TEXT," + // 6: clockTime
                "\"INTRODUCE\" TEXT," + // 7: introduce
                "\"TEL\" TEXT);"); // 8: tel
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, User entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(2, imgUrl);
        }
 
        String passWork = entity.getPassWork();
        if (passWork != null) {
            stmt.bindString(3, passWork);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(4, addr);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(5, tags);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
 
        String clockTime = entity.getClockTime();
        if (clockTime != null) {
            stmt.bindString(7, clockTime);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(8, introduce);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(9, tel);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, User entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String imgUrl = entity.getImgUrl();
        if (imgUrl != null) {
            stmt.bindString(2, imgUrl);
        }
 
        String passWork = entity.getPassWork();
        if (passWork != null) {
            stmt.bindString(3, passWork);
        }
 
        String addr = entity.getAddr();
        if (addr != null) {
            stmt.bindString(4, addr);
        }
 
        String tags = entity.getTags();
        if (tags != null) {
            stmt.bindString(5, tags);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(6, id);
        }
 
        String clockTime = entity.getClockTime();
        if (clockTime != null) {
            stmt.bindString(7, clockTime);
        }
 
        String introduce = entity.getIntroduce();
        if (introduce != null) {
            stmt.bindString(8, introduce);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(9, tel);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5);
    }    

    @Override
    public User readEntity(Cursor cursor, int offset) {
        User entity = new User( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imgUrl
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // passWork
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // addr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tags
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // id
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // clockTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // introduce
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // tel
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, User entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setImgUrl(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPassWork(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAddr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTags(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setClockTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setIntroduce(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setTel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(User entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(User entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(User entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
